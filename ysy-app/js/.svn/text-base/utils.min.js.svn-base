/**
 * 纯javascript方法(不依赖第三方组件)
 * 
 * 方法列表：
 *     
 *     stringUtil.getURLParams: 获取url中所有参数
 *     stringUtil.getURLParam: 获取url中指定name的参数值
 *     stringUtil.extractUrlId: 获取url中的文件名称
 * 	   stringUtil.bytesToSize: 文件大小单位转换
 * 	   stringUtil.generateMixed: 生成n位随机数
 * 	   stringUtil.generateUUID: 生成32位uuid
 * 	   stringUtil.bytesToSize: 文件大小单位转换
 *     stringUtil: 常用字符串处理
 *     dateUtils.format: 格式化时间，将一个时间转换成x小时前、y天前等.
 *     dateUtils.formatInt: 格式化时间,将时间戳整数转换成指定格式的日期字符串
 *     dateUtils.formatDate: 格式化时间,将日期类型对象串转换成指定格式的日期字符串
 *     dateUtils.formatDateStr: 格式化时间,将日期字符串转换成指定格式的日期字符串
 *     dateUtils.now: 获取当前日期时间(可自定义格式)
 *     
 *     Promise: 原生js实现promise
 * 
 * @author SnoopyChen(ceo@vmeitime.com)
 * @version 0.1.20171202
 */
(function(w, doc) {
	
	
	
	/* 常用字符串处理  */
	var stringUtil  = w.stringUtil = {
		
		/*获取url中所有参数*/
		getURLParams: function() {
		    var url = location.search;   //获取url中"?"符后的字串
		    var params = new Object();
		    if (url.indexOf("?") != -1) {
		        var str = url.substr(1);
		        strs = str.split("&");
		        for (var i = 0; i < strs.length; i++) {
		            params[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
		        }
		    }
		    mui.alert(params);
		    return params;
		},
		/*获取url中指定name的参数值*/
		getURLParam: function(name) {
			var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
			var r = window.location.search.substr(1).match(reg); //获取url中"?"符后的字符串并正则匹配
			var context = "";
			if(r != null)
				context = r[2];
			reg = null;
			r = null;
			return context == null || context == "" || context == "undefined" ? "" : context;
		},
		/*获取url中的文件名称*/
		extractUrlId: function(url) {
			if(url.indexOf("/") == -1) {
				return url;
			} else {
				var parts = url.split("/");
				return parts[parts.length - 1];
			}
		},
		/* 文件大小单位转换 */
		bytesToSize: function(bytes) {
			var sizes = ['Bytes', 'KB', 'MB'];
			if(bytes == 0) {
				return 'n/a';
			}
			var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
			return(bytes / Math.pow(1024, i)).toFixed(1) + ' ' + sizes[i];
		},
		/* 生成n位随机数 */
		generateMixed: function(n) {
			var res = "";
			for(var i = 0; i < n; i++) {
				var id = Math.ceil(Math.random() * 35) + "";
				id = id.substr(id.length - 1, id.length);
				res += id;
			}
			return res;
		},
		/*生成32位uuid */
		generateUUID: function() {
			var s = [];
			var hexDigits = "0123456789abcdef";
			for(var i = 0; i < 32; i++) {
				s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
			}
			var uuid = s.join("");
			return uuid;
		}
		
	};
	
	/**
	 * 格式化时间的辅助类 
	 */
	var dateUtils = w.dateUtils = {
		
		/**
		 * 1. 将一个日期时间字符串转换成x小时前、y天前等
	 	 * 例：dateUtils.format("2017-11-08 10:30:04"); 返回: "40分钟前"
		 * @param {Object} dateStr 日期字符串
		 */
		format: function(dateStr) {
			var date = this.parse(dateStr)
			var diff = Date.now() - date.getTime();
			if(diff < this.UNITS['天']) {
				return this.humanize(diff);
			}
			
			var _format = function(number) {
				return(number < 10 ? ('0' + number) : number);
			};
			return date.getFullYear() + '-' + _format(date.getMonth() + 1) + '-' + _format(date.getDate()) + ' ' + _format(date.getHours()) + ':' + _format(date.getMinutes());
		},
		/** 
		 * 2.时间戳格式化函数 
		 * @param {int} timestamp 要格式化的时间 默认为当前时间 
		 * @param {string} format 格式 
		 * @return {string}   格式化的时间字符串 
		 * 调用实例 ：
		 * 		dateUtils.formatInt(1350052653,'yyyy-MM-dd hh:mm:ss');  //很方便的将时间戳转换成了 "2012-10-12 22:37:33"
		 */
		formatInt:function(timestamp,format) {
			var jsdate = ((timestamp) ? new Date(timestamp) : new Date());
			return jsdate.format(format || 'yyyy-MM-dd hh:mm:ss');
		},
		/**
		 * 3.日期格式化方法 
		 * dateObj 日期对象
		 * format 格式化字符串 ：yyyy-MM-dd hh:mm:ss
		 */
		formatDate: function(dateObj, format) {
			var date = new Date();
			date.setTime(dateObj.time);
			date.setHours(dateObj.hours);
			date.setMinutes(dateObj.minutes);
			date.setSeconds(dateObj.seconds);
			format = format || 'yyyy-MM-dd hh:mm:ss';
			return date.format(format);
		},
		/**
		 * 4.日期格式化方法
		 * strDate 日期字符串
		 * format 格式化字符串 ：yyyy-MM-dd hh:mm:ss
		 */
		formatStr: function(strDate, format) {
			strDate = strDate || "";
			if(strDate == "") {
				return "";
			}
			var date = eval('new Date(' + strDate.replace(/\d+(?=-[^-]+$)/, function(a) {
				return parseInt(a, 10) - 1;
			}).match(/\d+/g) + ')');
			format = format || 'yyyy-MM-dd hh:mm';
			return date.format(format);
		},
		/** 
		 * 5.获取当前日期时间(可自定义格式)
		 * @param {string} format 格式 
		 * @return {string}  格式化的时间字符串 
		 * 调用实例 ：
		 * 		dateUtils.now('yyyy-MM-dd hh:mm:ss');  //很方便的将时间戳转换成了 "2012-12-02 22:37:33"
		 */
		now:function(format) {
			var jsdate = new Date();
			return jsdate.format(format || 'yyyy-MM-dd hh:mm:ss');
		},
		
		UNITS: {
			'年': 31557600000,
			'月': 2629800000,
			'天': 86400000,
			'小时': 3600000,
			'分钟': 60000,
			'秒': 1000
		},
		humanize: function(milliseconds) {
			var humanize = '';
			mui.each(this.UNITS, function(unit, value) {
				if(milliseconds >= value) {
					humanize = Math.floor(milliseconds / value) + unit + '前';
					return false;
				}
				return true;
			});
			return humanize || '刚刚';
		},
		parse:function (str) {//将"yyyy-mm-dd HH:MM:ss"格式的字符串，转化为一个Date对象
			var a = str.split(/[^0-9]/);
			return new Date (a[0],a[1]-1,a[2],a[3],a[4],a[5] );
		}
		
	};
	
	
	/* 原生js实现promise */
	var Promise = w.Promise = function() {
	    this.callbacks = [];
	};
	Promise.prototype = {
	    construct: Promise,
	    resolve: function(result) {
	        this.complete("resolve", result);
	    },
	    reject: function(result) {
	        this.complete("reject", result);
	    },
	    complete: function(type, result) {
	        while (this.callbacks[0]) {
	            this.callbacks.shift()[type](result);
	        }
	    },
	    then: function(successHandler, failedHandler) {
	        this.callbacks.push({
	            resolve: successHandler,
	            reject: failedHandler
	        });
	        return this;
	    }
	};

	/* 自定义日期时间格式方法 */
	Date.prototype.format = function(format) {
		var o = {
			"M+": this.getMonth() + 1, //month
			"d+": this.getDate(), //day
			"h+": this.getHours(), //hour
			"m+": this.getMinutes(), //minute
			"s+": this.getSeconds(), //second
			"q+": Math.floor((this.getMonth() + 3) / 3), //quarter
			"S": this.getMilliseconds() //millisecond
		};
		if(/(y+)/.test(format)) format = format.replace(RegExp.$1,
			(this.getFullYear() + "").substr(4 - RegExp.$1.length));
		for(var k in o) {
			if(new RegExp("(" + k + ")").test(format)) {
				format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
			}
		}
		return format;
	};
	Date.prototype.pattern = function(fmt) {
		var o = {
			"M+": this.getMonth() + 1, //月份         
			"d+": this.getDate(), //日         
			"h+": this.getHours() % 12 == 0 ? 12 : this.getHours() % 12, //小时         
			"H+": this.getHours(), //小时         
			"m+": this.getMinutes(), //分         
			"s+": this.getSeconds(), //秒         
			"q+": Math.floor((this.getMonth() + 3) / 3), //季度         
			"S": this.getMilliseconds() //毫秒         
		};
		var week = {
			"0": "/u65e5",
			"1": "/u4e00",
			"2": "/u4e8c",
			"3": "/u4e09",
			"4": "/u56db",
			"5": "/u4e94",
			"6": "/u516d"
		};
		if(/(y+)/.test(fmt)) {
			fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
		}
		if(/(E+)/.test(fmt)) {
			fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? "/u661f/u671f" : "/u5468") : "") + week[this.getDay() + ""]);
		}
		for(var k in o) {
			if(new RegExp("(" + k + ")").test(fmt)) {
				fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
			}
		}
		return fmt;
	};
	
	
}(window, document));





	
