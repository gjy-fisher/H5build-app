/**
 * @desc 深圳港引航app通用js (dev)
 * 
 * 方法清单：
 * 	 login: 登录
 *   
 * 	
 * @author SnoopyChen(ceo@vmeitime.com)
 * @version 0.1.20171202
 */

(function($, w, doc,owner) {

	//https://app2.szpilot.com.cn:8081/szg_app/swagger-ui.html 
	//var API_URL = w.API_URL = 'https://app2.szpilot.com.cn:8081/szg_app';
	var API_URL = w.API_URL = 'http://192.168.130.12:9090';
	//var API_URL = w.API_URL = 'http://192.168.0.10:9090';
	var APP_KEY = w.APP_KEY = 'Lego.2016~!@#$%^&*()';
	var PER_PAGE_NUM = w.PER_PAGE_NUM = 10;
	
	/* 各缓存的key值常量定义 */
	var STOREKEY_SETTINGS = w.STOREKEY_SETTINGS = '$settings';	// 零散的一些设置信息
	var STOREKEY_USER = w.STOREKEY_USER = '$user';	// 登录成功返回结果
	var STOREKEY_LOGIN = w.STOREKEY_LOGIN = '$login';	// 当前登录信息
	var STOREKEY_TASK_LIST = w.STOREKEY_TASK_LIST = '$task_list_';	// 任务管理
	var STOREKEY_EXCEPTION = w.STOREKEY_EXCEPTION = '$exception';	// 异常上报没有提交到服务器的记录集合(isSyn=0)
	var STOREKEY_SHIP = w.STOREKEY_SHIP = '$ship_list';	// 船舶列表
	var STOREKEY_SCHEDULE = w.STOREKEY_SCHEDULE = '$schedule_plan_list';	// 调度计划
	var STOREKEY_BERTH = w.STOREKEY_BERTH = '$berth_list';	// 泊位信息
	var STOREKEY_TIDE = w.STOREKEY_TIDE = '$tide_list';	// 潮汐信息
	var STOREKEY_PILOTAGE = w.STOREKEY_PILOTAGE = '$pilotage_list';	// 个人引航数据
	var STOREKEY_WORKLOAD = w.STOREKEY_WORKLOAD = '$workload_list';	// 个人工作量
	var STOREKEY_SHIP_SCALE = w.STOREKEY_SHIP_SCALE = '$ship_scale_list';	// 船舶尺寸

	var shield = function(){
		return false;
	}
	doc.addEventListener('touchstart',shield,false); //取消浏览器的所有事件，使得active的样式在手机上正常生效
	doc.oncontextmenu = shield;   //屏蔽选择函数
	
	
	// 上线后禁用日志输出(目前有问题)
	//var console = w.console = {log:shield}

	/* 登录 */
	var login = w.login = function(loginInfo, callback) {
		callback = callback || $.noop;
		loginInfo = loginInfo || {};
		loginInfo.account = loginInfo.account || '';
		loginInfo.password = loginInfo.password || '';
		if (loginInfo.account.length < 2) {
			return callback('账号最短为 2 个字符');
		}
		if (loginInfo.password.length < 1) {
			return callback('密码最短为 1个字符');
		}
		var account_encode = encodeURI(loginInfo.account);
		var password_md5 = hex_md5(loginInfo.password);
		/*异步方式登录*/
		muiajax(API_URL+ '/api/user/login', 
			{"logonid":account_encode,"password":password_md5}, 
			'POST',
			function(resData){
				console.info("==登录返回结果==："+JSON.stringify(resData));
				if(resData && resData.code == '1') {
					var login = {};
					login.account = loginInfo.account || '';
					login.token = resData.token || ''; 
					login.user = resData.user || resData.agent;
					login.role = resData.user ? "pilot":"agent";
					setStorage(STOREKEY_LOGIN,login);
					return callback();
				}else{
					return callback(resData.msg || "登录失败");
				}
			}, function(xhr, type, errorThrown){
				console.log("登录异常=type："+type+" , errorThrown: "+errorThrown);
				err  = type == 'abort'? '网络异常，请确认接口服务正确。':type == 'timeout'? '网络异常，请确认接口服务正确。':  errorThrown == 'bad request'?"请求异常，请确认API服务正确连通！":"用户名或密码错误";
				return callback(err);
			}, STOREKEY_USER);
		
		/* 同步方式登录 */
//		var loginOpt={'apiUrl':'/api/user/login','reqType':'POST','reqData':{"logonid":account_encode,"password":password_md5},'storeKey':STOREKEY_USER};
//      getAjaxData(loginOpt,new Promise()).then(function(resData){
//          console.info("==登录返回结果==："+JSON.stringify(resData));
//      },function(err){
//          console.info("==登录异常==："+ err);
//      });
	};
	
	/* 获取当前登录用户信息(包括引水员或船代)*/
	var getUserInfo = w.getUserInfo = function(){
		var userInfo = getStorage(STOREKEY_LOGIN);
		if(userInfo && userInfo.user){
			return userInfo.user;
		}
		return {};
	}
	
	/* 退出 */
	var logout = w.logout = function(){
		muiajax(API_URL+ '/api/user/logout', 
			{}, 
			'GET',
			function(resData){
				console.info("==退出返回结果==："+JSON.stringify(resData));
				if(resData && resData.code == '1') {
					
				}else{
					//mui.toast(resData.msg || "退出失败");
				}
				gotoLogin();
			}, function(xhr, type, errorThrown){
				console.log("退出异常=type："+type+" , errorThrown: "+errorThrown);
				err  = type == 'abort'? '网络异常，请确认接口服务正确。':type == 'timeout'? '网络异常，请确认接口服务正确。':  errorThrown == 'bad request'?"请求异常，请确认API服务正确连通！":"用户名或密码错误";
				//mui.toast(err);
				gotoLogin();
			}
		);
		
		
	}
	/* 退出到登录界面 */
	var gotoLogin = function(){
		clearStorage({"type":"all"});
		//var loginView = plus.webview.getLaunchWebview();
		//mui.fire(loginView, "initPage");
		//loginView.show("slide-in-right", 10);
		mui.later(function(){
			closeAllWebView();
			//plus.runtime.quit();
		},100);
	}
	
	
	 /**
     * 更新作业管理
     * 公共方法（整到app.min.js文件中)
     * @param {Object} opt
     */
    /*var updatePilotStatus = w.updatePilotStatus = function(opt){
        var sucCallback = opt.sucCallback || $.noop;
        var errCallback = opt.errCallback || $.noop;
        var offLineCallback = opt.offLineCallback || $.noop;
        var oldStatus = opt.oldStatus;
        var data = opt.data || {};  // resourceid,pliotStatus,shipTime,workTime,remarks,viseCode,pics
        var storeKey = opt.storeKey || '';
        var online = isOnline();
        if(online){ //在线
            muiajax(API_URL + '/api/update/updatePilotStatus', data, 'POST', function(resData){
                console.info("ID:"+ opt.data.resourceid +"==saveException返回结果==："+JSON.stringify(resData));
                sucCallback(resData);
            }, function(xhr, type, errorThrown){
                errCallback(xhr, type, errorThrown);
            });
        }else{ //离线,通过storekey操作缓存,并增加属性 isEdit:1,isSyn:0
            //从oldStatus对应的缓存取出修改对应字段后放入到data.pliotStatus对应的缓存，并删除原oldStatus对应的缓存中这条记录
            offLineCallback();
        }
    }*/

    //获取待提交的离线数据
    var getOffLineDataForPage=w.getOffLineDataForPage=function() {
        var returnData={
            'notify':[],
            'ready':[],
            'start':[],
            'end':[],
        };
        var notifyDataList=getStorage('notify');
        var readyDataList=getStorage('ready');
        var startDataList=getStorage('start');
        var endDataList=getStorage('end');
        returnData.notify=(notifyDataList instanceof Array)?notifyDataList:[];
        returnData.ready=(readyDataList instanceof Array)?getStorage('ready'):[];
        returnData.start=(startDataList instanceof Array)?getStorage('start'):[];
        returnData.end=(endDataList instanceof Array)?getStorage('end'):[];
        return returnData;
    }
    //批量提交离线信息
    var postOffLineData=w.postOffLineData=function(promise1,deviceInfo) {
        try{
            /*var test = true;
                    setTimeout(function () {
                        promise1.resolve(true);
                    }, 100);
                    return promise1;*/
            var that=this;
            var postData = [];
            var OffLineData= getOffLineDataForPage();
            if(OffLineData.notify.length<=0&&OffLineData.ready.length<=0&&OffLineData.start.length<=0&&OffLineData.end.length<=0){
                setTimeout(function () {
                    promise1.resolve(true);
                }, 100);
                return promise1;
            }
            //获取待提交的离线数据
            var imgesData=[];
            var imgesKey={picKey:[]};
            for(var cacheKey in OffLineData){
                OffLineData[cacheKey].forEach(function (value) {
                    if (value.isSyn!=undefined && value.isSyn == 0 && value.isEdit!=undefined && value.isEdit == 1) {
                        var item = {
                            id: '',
                            shipStartTime: '',
                            workStartTime: '',
                            shipEndTime: '',
                            workEndTime: '',
                            remarks: '',
                            viseCode: '',
                            pics: '',
                            key: cacheKey
                        };
                        item.id = value.resourceid;
                        item.pliotStatus = value.pliotStatus;
                        if (cacheKey == 'start') {
                            item.shipStartTime = value.boardTime;
                            item.workStartTime = value.startWorkTime;
                        }
                        if (cacheKey == 'end') {
                            item.shipStartTime = value.boardTime;
                            item.workStartTime = value.startWorkTime;
                            item.shipEndTime = value.wheelTime;
                            item.workEndTime = value.endWorkTime;
                            item.viseCode = value.viseCode;
                            item.remarks = value.remarks;
                            item.pics = value.pics;
                            imgesData=imgesData.concat(item.pics);
                            imgesKey['picKey'].push('pic_'+value.resourceid);
                        }
                        postData.push(JSON.stringify(item));
                    }
                });
            }
            var formdata = {"WEB_PARAM":postData};
            var data = mui.extend({}, deviceInfo, formdata, {
                images: imgesData
            });
            if(imgesData.length>0){
                data["picKey"] = imgesKey.picKey;
            }
            //上传离线数据到服务器
            var opt = {};
            opt.data = data;
            opt.files = imgesData;
            opt.that=that;
            opt.postData=postData;
            opt.url=API_URL+ '/api/update/batchUpdatePliotStatus';
            opt.sucCallback = function (opt) {
                var asyncSuccessNum = 0;//同步数据成功条数
                if (!!opt.data.ids) {
                    opt.postData.forEach(function (value4) {
                        if (opt.data.ids.indexOf(value4.id)) {
                            asyncSuccessNum++;
                            setPageCacheByOption(value4.key,value4.resourceid, {isSyn: 1, isEdit: 0});
                        }
                    });
                }
                if (asyncSuccessNum == opt.postData.length) {
                    var CachePagesKeys = getStorage('pagesCache');
                    for(var clearKey in OffLineData){
                        clearStorage({type: 'local', key: clearKey});
                    }
                    promise1.resolve(true);
                }
                else {
                    promise1.resolve(false);
                    console.info('尚有未提交的离线数据');
                }
            };
            opt.errCallback = function (opt) {
                promise1.reject(false);
                mui.toast('提交失败'+opt.status);
            };
            if(opt.postData.length>0){
                sendFormData(opt);
            }else{
                setTimeout(function () {
                    promise1.resolve(true);
                }, 100);
            }
            return promise1;
        }
        catch (ex){
            setTimeout(function () {
                promise1.reject(ex);
            }, 100);
            return promise1;
        }
    };

    //调用mui包含附件的上传方法
    var sendFormData = w.sendFormData=function(opt) {
        console.log("准备提交的数据："+ JSON.stringify(opt.data));
        var uploader = plus.uploader.createUpload(opt.url,
            {method: 'POST',timeout: 30000 },
            function(upload, status) {
                plus.nativeUI.closeWaiting()
                console.log("upload cb: status: "+ status + ', responseText: '+upload.responseText);
                opt.data=data;
                opt.status=status;
                if(status==200){
                    var data = JSON.parse(upload.responseText);
                    if (data.code === 1) {
                        mui.alert("提交成功","确定",function () {
                            //TODO 提交成功后，回跳到列表并刷新列表数据
                            opt.data=data;
                            opt.sucCallback(opt);
                        });
                    }else{
                        opt.errCallback(opt);
                    }
                }else{
                    opt.errCallback(opt);
                }
            }
        );

        var token = getStorage(STOREKEY_LOGIN).token;
        //token = "DB0004C5FB3C583579397B050A1B0D52";
        uploader.setRequestHeader("Cookie",'JSESSIONID='+token);
        uploader.setRequestHeader("token",token);
        //添加上传数据
        mui.each(opt.data, function(key, val) {
            if (key !== 'images') {
                console.log("addData:"+key+","+val);
                uploader.addData(key, JSON.stringify(val));
            }
        });
        //添加上传图片文件
        mui.each(opt.files, function(index, element) {
            var f = opt.files[index];
            console.log("addImageFile:"+JSON.stringify(f));
            uploader.addFile(f.path, {
                key: f.name
            });
        });
        //开始上传任务
        uploader.start();
        //plus.nativeUI.showWaiting();
    };
	
    var scrollToTop=w.scrollToTop=function (opt) {
        document.querySelector(opt.domSelector).addEventListener('doubletap',function(){
            mui(opt.scrollDomSelector).scroll().scrollTo(0,0,300);
        });
    }
	
	
}(mui, window, document, window.app = {}));



