/**
 * 与mui、H5+框架有关的js
 * 
 * 方法列表：
 * 	 muiajax: 基于mui的ajax请求方法(GET/POST)
 *   getAjaxData: 动态获取数据(Promise同步方式)
 *   preloadWindow: 预加载页面  
 *   openWindow: 打开新页面
 *   getWebviewOpener
 *   getWebviewById
 *   logAllWebView
 *   closeAllWebView
 *   uploadUtil: 上传文件  
 *   downloadUtil: 下载文件 
 *   isOnline: 是否有网络(是否在线)
 *   appDeviceInfo: 获取手机设备信息 
 *   getGeoLocation: 获取地理位置信息
 *   bindPopPickerEvent: 初始化(下拉选择控件)事件
 *   bindDateTimeEvent: mui时间插件初始化(新) (根据id设值)
 *   bindDateEvent: mui时间插件初始化 (根据span.queryDate类设值)
 *   bindPreNextDateEvent: 前一天与后一天按钮的初始化事件
 *   initImgPreview 初始图片预览控件
 * 	 setStorage: 设置缓存
 *   getStorage: 获取缓存
 *   clearStorage: 清空缓存
 *   showById 显示指定id的控件
 * 	 hideById 隐藏指定id的控件
 *   showByClass 显示指定唯一classname的控件 
 * 	 hideByClass 隐藏指定唯一classname的控件
 * 	 isIOS: 是否ios设备
 * 	 isAndroid: 是否安卓设备
 *   isStream: 是否流应用
 *   alert: 警告框
 *   toast: 消息提示框
 * 	 isInstalled： 获取本地是否安装指定客户端 
 * 
 * @author SnoopyChen(ceo@vmeitime.com)
 * @version 0.1.20171202
 */
(function($, w, doc) {
	
	/* 对 H5+ 一些问题的修复，引入该文件即可修复  */
	mui.plusReady(function() {
		try{
			// 修复mui主view被close或hide时，子view还看得到的问题
			mui.currentWebview.addEventListener('hide', function() {
				var subViews = plus.webview.currentWebview().children();
				if(subViews != null && subViews.length > 0) {
					for(var i = 0; i < subViews.length; i++) {
						subViews[i].hide("none");
					}
				}
			});
			mui.currentWebview.addEventListener('close', function() {
				var subViews = plus.webview.currentWebview().children();
				if(subViews != null && subViews.length > 0) {
					for(var i = 0; i < subViews.length; i++) {
						subViews[i].close();
					}
				}
			});
			// 设置成仅支持竖屏显示 (landscape:横屏; portrait-primary:竖屏)
			plus.screen.lockOrientation("portrait-primary");
		}catch(e){
		}
		
	});
	
	/**
     * ajax请求，注意返回的是json类型数据
     * @param {string} url 地址
     * @param {object} data 数据
     * @param {string} method GET/POST
     * @param {function} sucCallback 请求成功回调，sucCallback(data)中，data为响应返回
     * @param {function} errCallback 请求失败回调，errCallback(xhr, type, errorThrown)
     * @param {string} storeKey缓存中的键值
     */
    var muiajax = w.muiajax = function(url, data, method, sucCallback, errCallback,storeKey) {
    	sucCallback = sucCallback || $.noop;
        errCallback = errCallback || $.noop;
    	var online = isOnline(); 
    	if(online){ //在线
    		
    		var token = getStorage(STOREKEY_LOGIN).token;
    		//token = "73F001359C8B67E928997E04A8CAD4F5";
	        data = data || {};
	        data = {"WEB_PARAM":JSON.stringify(data)};
	        var _r = new Date().getMilliseconds();
	        data['_r'] = _r;
	        //validata = hex_md5(JsonUtil.getStr(data));
	        console.log(" = muiajax()= url: " + url + ',token: '+ token +',args data: ' + JSON.stringify(data));
	        if($.os.plus){ plus.nativeUI.showWaiting(); }
	        $.ajax(url,{
	            type: method || 'GET',
	            data: data,
	            dataType: 'json',
	            crossDomain: true,
	            timeout: 60000,
	            headers: {
	                'Content-Type':'application/json;charset=UTF-8',
	                'Content-Type':'application/x-www-form-urlencoded',
	                /*'Cookie':'JSESSIONID='+token,*/
	                'token':token
	                /*,'verifyDataSign':validata*/
	            },
	            success:function(resData){
	                console.info("==muiajax "+method+" 正常返回结果== ："+JSON.stringify(resData));
	                if($.os.plus){ 
	                	plus.nativeUI.closeWaiting(); 
	                }
	                if(storeKey && (resData.code == 1) && (resData.token || resData.datas || 
                		(resData.pageDatas && resData.pageDatas.curRows && (resData.pageDatas.curRows > 0)) )
                		){
                		setStorage(storeKey, resData);
                	}
	                sucCallback(resData);
	            },
	            error: function(xhr, type, errorThrown){
	                err = type == 'abort'? '网络异常，请确认接口服务正确。':type == 'timeout'? '网络请求超时，请确认接口服务正常。':  errorThrown == 'bad request'?"请求异常，请确认API服务正确连通！": type +","+ errorThrown ;
	                console.log("==muiajax "+method+"异常返回结果== : "+err);
	                if($.os.plus){ plus.nativeUI.closeWaiting(); }
	                mui.toast(err);
	                errCallback(xhr, type, errorThrown);
	            }
	        });

    	}else{ //离线,通过storekey取缓存
    		
    		if(storeKey){
    			var resData = getStorage(storeKey);
    			setTimeout(function () {
                    sucCallback(resData);
                },100)
    		}
    	}
		
    };
    
    // 动态获取数据(Promise同步方式)
	var getAjaxData = w.getAjaxData = function(opt,promise){
	    var resData = '';
	    muiajax(API_URL + opt.apiUrl, opt.reqData, opt.reqType, function(data){
	        if(data && data.code == 1) {
	            resData=data;
	            promise.resolve(resData);
	        }else{
	            var errMsg = data.msg? data.msg:"返回错误.";
	            console.log(errMsg);
	            mui.toast(errMsg);
	            promise.reject(errMsg);
	        }
	    }, function(xhr, type, errorThrown){
	        var errMsg = "异常=type："+type+" , errorThrown: "+errorThrown;
	        console.log(errMsg);
	        //mui.toast(errMsg);
	        promise.reject(errMsg);
	    },opt.storeKey);
	    return promise;
	};
	
	/* 预加载页面 */
	var preloadWindow = w.preloadWindow = function(url,data,styles){
		var pageId = stringUtil.extractUrlId(url);
		data = data || {};
		styles = styles || {};
		return mui.preload({
		    url: url,
		    id: pageId, 
		    styles:styles, 
		    extras:data
		});
	};
    /**
     * 打开新页面
     * @param {string} url 新页面的地址
     * @param {boolean} autoShow 是否自动显示
     * @param {Object} data 传递到新页面的json参数
     */
    var openWindow = w.openWindow = function(url, autoShow, data) {
		autoShow = typeof autoShow !== 'undefined' ? autoShow : true;
		data = typeof data !== 'undefined' ? data : {};
		var pageId = stringUtil.extractUrlId(url);
		mui.openWindow({
			url: url,
			id: pageId,
			extras: data,
			createNew: false,
			waitting: {
				autoShow: true,
				title: "加载中..."
			},
			show: {
				autoShow: autoShow
			}
		});
	};
	var getWebviewOpener = w.getWebviewOpener = function() {
		return plus.webview.currentWebview().opener();
	};
	var getWebviewById = w.getWebviewById = function(id) {
		return plus.webview.getWebviewById(id);
	};
	var logAllWebView = w.logAllWebView = function(){
		var vw_list=plus.webview.all();
		for(var i=0,len=vw_list.length;i<len;i++){
			console.log("==当前已打开的窗口有==："+ vw_list[i].id);
		}
	};
	var closeAllWebView = w.closeAllWebView = function(){
		var vw_list=plus.webview.all();
		for(var i=0,len=vw_list.length;i<len;i++){
			if(vw_list[i].id != 'HBuilder'){
				vw_list[i].close();
			}
		}
	};
	
	/* 拍照/选图 */
	var photoUtil = w.photoUtil = {
		
		/* 选择图片来源  */
		choosePhoto:function(opt){
			var title = opt.title || '上传图片';
			if(mui.os.plus){
				plus.nativeUI.actionSheet({
					title: title,
					cancel: "取消",
					buttons: [{title:"拍照"}, {title:"从相册选择"}]
				}, function(b) {
					switch (b.index) {
						case 0: /*取消*/
							break;
						case 1:
							photoUtil.getCamera();
							break;
						case 2:
							photoUtil.galleryImg();
							break;
						default:
							break
					}
				})	
			}
		},
		/* 拍照 */
		getCamera:function(cameraOption){
			cameraOption = cameraOption || {};
			var c = plus.camera.getCamera();
			c.captureImage(function(path) {
				plus.io.resolveLocalFileSystemURL(path, function(entry) {
					var s = entry.toLocalURL() + "?version=" + new Date().getTime();
					console.log("==拍照文件本地路径==："+s);
					//document.getElementById("head-img").src = s;
				}, function(e) {
					console.log("==读取拍照文件错误==：" + e.message);
				});
			}, function(error) {
				console.log("==调用摄像头出错==: " + error);
			},cameraOption);
		},
		c:function(){
			//相册选图
		},
		d:function(){
			//压缩
		},
		base64Data:function(){
			
		},
		urlData:function(){
			
		},
		f:function(){
			//预览
		},
		startVideoCapture:function(){
			//调用摄像头进行摄像操作
		},
		stopVideoCapture:function(){
			//结束摄像操作
		}
		
	};
	
	/* 上传文件 */
	var uploadUtil = w.uploadUtil = {
		
		/*
		 * 上传文件，数据格式符合rfc1867（即Form-based File Upload in HTML）协议
		 * @param {string} url 地址
		 * @param {object} data 数据
		 * @param {object} fileInfos 存放对象{ path:xxx,uploadFileOptions:xxx}的数组，
		 *                 filePath是文件路径，uploadFileOptions(objecte类型)存放每个文件的额外信息
		 * @param {object} completedCallback 完成回调 completedCallback(upload,status), 
		 *                                   upload上传任务对象;status结果状态码，初始为0,上传成功通常为200.
		 */
		uploadFile: function(url, data, fileInfos, completedCallback) {
			if(fileInfos.length <= 0) return;
			var task = plus.uploader.createUpload(url, {
				method: "POST"
			}, completedCallback);
			for(var i in data) {
				task.addData(i, data[i]);
			}
			for(var i = 0; i < fileInfos.length; i++) {
				var f = fileInfos[i];
				task.addFile(f.path, f.uploadFileOptions);
			}
			console.log("==uploadFile== url==>" + url +", data==>" + JsonUtil.getStr(data) + ", fileInfos==>" + JsonUtil.getStr(fileInfos));
			task.start();
			return task;
		},
		// 暂停上传任务
		pauseUpload: function(task) {
			task.pause();
		},
		//恢复
		resumeUpload: function(task) {
			task.resume();
		},
		//取消上传任务
		abortUpload: function(task) {
			task.abort();
		},
		//清除所有未完成的上传任务
		clearAllUnfinishUpload: function() {
			plus.uploader.clear();
		}
		
	};
	
	/* 下载文件 */
	var downloadUtil = {
	
		/*
		 * 下载文件
		 * @param {string} url 地址
		 * @param {object} startCallback 下载开始回调
		 * @param {object} downloadingCallback（downloadedSize,totalSize） 下载中回调
		 * @param {object} downSuccessCallback 下载完成回调
		 * */
		downloadFile: function(url, startCallback, downloadingCallback, downSuccessCallback, downFailCallback) {
			var options = {
				method: "GET"
			};
			var dtask = plus.downloader.createDownload(url, options);
			dtask.addEventListener("statechanged", function(task, status) {
				if(!dtask) return;
				console.log("==当前下载状态==> " + task.state);
				switch(task.state) {
					case 0: //任务开始调度
						break;
					case 1: //开始请求
						startCallback();
						break;
					case 2: //已连接到服务器
						break;
					case 3: //已接收到数据
						downloadingCallback(task.downloadedSize, task.totalSize);
						break;
					case 4: //下载完成
						if(status == 200) { //下载成功
							downSuccessCallback();
						} else { //下载失败
							downFailCallback();
						}
						break;
					default:
						break;
				}
			});
			dtask.start();
			return dtask;
		},
		//暂停下载
		pauseDownload: function(dtask) {
			dtask.pause();
		},
		//恢复
		resumeDownload: function(dtask) {
			dtask.resume();
		},
		//取消
		abortDownload: function(dtask) {
			dtask.abort();
			dtask = null;
		},
		//清除所有未完成的下载任务
		cleanAllUnfinishedDownload: function() {
			plus.downloader.clear();
		},
		//开始所有下载任务
		startAllDownload: function() {
			plus.downloader.startAll();
		}
	};

	/**
	 * 判断是否有网络(是否在线)
	 * return true or false
	 */
	var isOnline = w.isOnline = function() {
		var network = false;
		if($.os.plus) {
			//$.plusReady(function() {
				var types = {};
				types[plus.networkinfo.CONNECTION_UNKNOW] = "Unknown connection";
				types[plus.networkinfo.CONNECTION_NONE] = "None connection";
				types[plus.networkinfo.CONNECTION_ETHERNET] = "Ethernet connection";
				types[plus.networkinfo.CONNECTION_WIFI] = "WiFi connection";
				types[plus.networkinfo.CONNECTION_CELL2G] = "Cellular 2G connection";
				types[plus.networkinfo.CONNECTION_CELL3G] = "Cellular 3G connection";
				types[plus.networkinfo.CONNECTION_CELL4G] = "Cellular 4G connection";
				var currNet = plus.networkinfo.getCurrentType();
				console.log(" == 当前网络状态 == " + types[currNet]);
				if(currNet === plus.networkinfo.CONNECTION_NONE) {
					plus.nativeUI.toast('似乎已断开与互联网的连接', {verticalAlign: 'top'});
					return false;
				} else {
					return true;
				}
			//});
		}else{
			return network;
		}
	};
	
	//获取手机设备信息
	var appDeviceInfo = w.appDeviceInfo = function() {
		if($.os.plus){
			var deviceInfo = {
				appid: plus.runtime.appid,
				imei: plus.device.imei, //设备标识
				p: mui.os.android ? 'a' : 'i', //平台类型，i表示iOS平台，a表示Android平台。
				md: plus.device.model, //设备型号
				app_version: plus.runtime.version,
				plus_version: plus.runtime.innerVersion, //基座版本号
				os:  mui.os.version,
				net: ''+plus.networkinfo.getCurrentType()
			};
			console.log('== 设备信息 =='+deviceInfo);
			return deviceInfo;
		}else{
			return {};
		}
	};
	
	//TODO 
	//压缩
	
	/* 获取地理位置信息 */
	var getGeoLocation = w.getGeoLocation = function(opt){
		geocode = opt.geocode || true; //true-通过定位模块获取位置; false-获取设备位置
		sucCallback = opt.sucCallback || $.noop; 
        errCallback = opt.errCallback || $.noop;
		plus.geolocation.getCurrentPosition( 
			function(position){
				var str = "";
				var address = position.address; //获取地理位置对应的地址信息
				if(address){
					str += "国家: "+address.country+"\n";
					str += "省："+address.province+"\n"; 
					str += "市："+address.city+"\n"; 
					str += "区(县)："+address.district+"\n"; 
					str += "街道："+address.street+"\n"; 
					str += "街道门牌号："+address.streetNum+"\n"; 
					str += "POI信息："+address.poiName+"\n"; 
					str += "邮政编码："+address.postalCode+"\n";
					str += "城市代码："+address.cityCode+"\n";
				}
				str += "地址："+position.addresses+"\n";//获取地址信息
				str += "坐标类型："+position.coordsType+"\n";
				var timeflag = position.timestamp;//获取到地理位置信息的时间戳；一个毫秒数；
				str += "时间戳(毫秒)："+timeflag+"\n";
				var codns = position.coords;//获取地理坐标信息；
				var lat = codns.latitude;//获取到当前位置的纬度；
				str += "纬度："+lat+"\n";
				var longt = codns.longitude;//获取到当前位置的经度
				str += "经度："+longt+"\n";
				var alt = codns.altitude;//获取到当前位置的海拔信息；
				str += "海拔："+alt+"\n";
				var accu = codns.accuracy;//地理坐标信息精确度信息；
				str += "精确度："+accu+"\n";
				var altAcc = codns.altitudeAccuracy;//获取海拔信息的精确度；
				str += "海拔精确度："+altAcc+"\n";
				var head = codns.heading;//获取设备的移动方向；
				str += "移动方向："+head+"\n";
				var sped = codns.speed;//获取设备的移动速度；
				str += "移动速度："+sped;
				//console.log("获取定位位置信息成功：" +JSON.stringify(position));
				//console.log("定位成功："+ str );
				sucCallback(position);
			}, 
			function ( e ) {
				console.log( "获取定位位置信息失败：code: "+e.code + ',message: ' +e.message);
				errCallback(e);
			},
			{geocode:geocode,enableHighAccuracy:false,timeout:120000}
		);
	};
	
	/**
	 * PopPicker初始化(下拉选择控件)
	 * @param $ 默认mui对象
	 * @param ele dom节点对象： document.getElementById('id')
	 * @param opt 配置对象： [{'value':'1', 'text':'男'},{'value':'2', 'text':'女'}]
	 */
	var bindPopPickerEvent = w.bindPopPickerEvent = function($,ele,opt,callback) {
	    var picker = new $.PopPicker();
	    picker.setData(opt);
	    ele.addEventListener('tap', function(event) {
	        picker.show(function(items) {
	            ele.innerText = items[0].text;
	            ele.setAttribute('data-value',items[0].value);
	            callback(items);
	            //return false; //返回 false 可以阻止选择框的关闭
	        });
	    }, false);
	    return picker;
	};
	/**
	 * mui时间插件初始化(新)
	 * (根据id设值)
	 * (依赖: mui.picker.min.css/mui.picker.min.js )
	 * @param ele dom节点对象: $('.dtpicker')
	 * @param opt 时间插件的配置项(json字符串): '{"type":"date","beginYear":2010,"endYear":2020}'
	 */
	var bindDateTimeEvent = w.bindDateTimeEvent = function(ele,opt,callback) {
		callback = callback || $.noop;
		ele.each(function(i, btn) {
			btn.addEventListener('tap', function() {
				var _self = this;
				var id = this.getAttribute('id');
				if(_self.picker) {
					_self.picker.show(function (rs) {
						mui('#'+id)[0].value = rs.value;
						callback(rs);
						_self.picker.dispose();
						_self.picker = null;
					});
				} else {
					var optionsJson = opt || this.getAttribute('data-options') || '{}';
					var options = JSON.parse(optionsJson);
					_self.picker = new mui.DtPicker(options);
					_self.picker.show(function(rs) {
						mui('#'+id)[0].value = rs.value;
						callback(rs);
						_self.picker.dispose();
						_self.picker = null;
					});
				}
				
			}, false);
		});
	};
	/**
	 * mui时间插件初始化
	 * (根据span.queryDate类设值)
	 * @param $ 默认传mui对象
	 * @param ele dom节点对象: $('.input-date')
	 * @param opt 时间插件的配置项(json字符串): '{"type":"date","beginYear":2010,"endYear":2020}'
	 */
	var bindDateEvent = w.bindDateEvent = function($,ele,opt,callback) {
	    ele.each(function(i, btn) {
	        btn.addEventListener('tap', function() {
	            var _self = this;
	            if(_self.picker) {
	                _self.picker.show(function (rs) {
	                    console.log('==日期选择结果==: ' + rs.text);
	                    _self.querySelector('span.queryDate').innerText=rs.text;
	                    callback();
	                    _self.picker.dispose();
	                    _self.picker = null;
	                });
	            } else {
	                var optionsJson = opt || '{}';
	                var options = JSON.parse(optionsJson);
	                var id = this.getAttribute('id');
	                _self.picker = new $.DtPicker(options);
	                _self.picker.show(function(rs) {
	                    console.log('==日期选择结果==: ' + rs.text);
	                    _self.querySelector('span.queryDate').innerHTML=rs.text;
	                    callback();
	                    _self.picker.dispose();
	                    _self.picker = null;
	                });
	            }
	        }, false);
	    });
	};
	/**
	 * 前一天与后一天按钮的初始化事件
	 * @param $ 默认传mui对象
	 * @param ele 点击按钮的dom节点对象: $('.date')
	 * @param changEle 显示时间的dom节点对象: $('#queryDate')[0] 
	 * @param callback 选择后回调函数
	 */
	var bindPreNextDateEvent = w.bindPreNextDateEvent = function($,ele,changEle,callback) {
	    ele.each(function(i, btn) {
	        btn.addEventListener('tap', function() {
	            var _self = this;
	            var chooseDate = changEle.innerHTML;
	            var dt = new Date(chooseDate);
	            if(_self.className.indexOf('leftcricle') >= 0){ // leftcricle前一天的控件样式
	                dt.setDate(dt.getDate() - 1);
	                changEle.innerHTML = dt.format('yyyy-MM-dd');
	                callback();
	            }else if(_self.className.indexOf('rightcricle') >=   0){ // rightcricle后一天的控件样式
	                dt.setDate(dt.getDate() + 1);
	                changEle.innerHTML = dt.format('yyyy-MM-dd');
	                callback();
	            }
	        }, false);
	    });
	};
	
	/**
	 * 初始图片预览控件
	 * @param clsName 需要预览的图片class名称,如："img.mui-action-preview"
	 */
	var initImgPreview = w.initImgPreview = function(clsName) {
		clsName = clsName || "img.mui-action-preview";
		var imgs = document.querySelectorAll(clsName);
		imgs = mui.slice.call(imgs);
		if (imgs && imgs.length > 0) {
			var slider = document.createElement("div");
			slider.setAttribute("id", "__mui-imageview__");
			slider.classList.add("mui-slider");
			slider.classList.add("mui-fullscreen");
			slider.style.display = "none";
			slider.addEventListener("tap", function() {
				slider.style.display = "none";
			});
			slider.addEventListener("touchmove", function(event) {
				event.preventDefault();
			})
			var slider_group = document.createElement("div");
			slider_group.setAttribute("id", "__mui-imageview__group");
			slider_group.classList.add("mui-slider-group");
			imgs.forEach(function(value, index, array) {
				//给图片添加点击事件，触发预览显示；
				value.addEventListener('tap', function() {
					slider.style.display = "block";
					_slider.refresh();
					_slider.gotoItem(index, 0);
				})
				var item = document.createElement("div");
				item.classList.add("mui-slider-item");
				var a = document.createElement("a");
				var img = document.createElement("img");
				img.setAttribute("src", value.src);
				a.appendChild(img)
				item.appendChild(a);
				slider_group.appendChild(item);
			});
			slider.appendChild(slider_group);
			document.body.appendChild(slider);
			var _slider = mui(slider).slider();
		}
	};
	
	/*缓存*/
	var setStorage = w.setStorage = function(key,val) {
		val = val || {};
		if($.os.plus){
    		//plus.storage.setItem(key, JSON.stringify(val));
    		localStorage.setItem(key, JSON.stringify(val));
		}else{
			localStorage.setItem(key, JSON.stringify(val));
		}
	};
    var getStorage = w.getStorage = function(key) {
    	var dataText = "{}";
    	if($.os.plus){
		    //dataText = plus.storage.getItem(key) || "{}";
		    dataText = localStorage.getItem(key) || "{}";
		    return JSON.parse(dataText); 
		}else{
			dataText = localStorage.getItem(key) || "{}";
			return JSON.parse(dataText);
		}
	};
	
	/**
	 * @desc 清空缓存  (包括指定缓存和所有缓存)
	 * @param {Object} opt (type:all/session/local; key:缓存key)
	 */
	var clearStorage = w.clearStorage = function(opt) {
		var type = opt.type || 'all';
		var key = opt.key || '';
		if($.os.plus){
    		plus.storage.clear();
		}else if(type=='all'){
			localStorage.clear();
			sessionStorage.clear();
		}
		else if(type=='local'){
			if(!!key&&!!localStorage.getItem(key)){
                localStorage.removeItem(key)
			}
		}
		//var v1 = localStorage.getItem("key"); 
		//localStorage.setItem("key", "value");
		//localStorage.removeItem("key");
		//localStorage.clear();
		//var v2 = sessionStorage.getItem("key"); 
		//sessionStorage.setItem("key", "value");
		//sessionStorage.removeItem("key"); 
		//sessionStorage.clear();
		//plus.storage.clear();
	}
	
	/* 根据id控制显示或隐藏  */
	var showById = w.showById = function(id) {
		$obj = $("#" + id)[0];
		if($obj && $obj.classList.contains('mui-hidden')) {
			$obj.classList.remove('mui-hidden');
		}
	};
	var hideById = w.hideById = function(id) {
		$obj = $("#" + id)[0];
		if($obj && !$obj.classList.contains('mui-hidden')) {
			$obj.classList.add('mui-hidden');
		}
	};
	/* 根据唯一classname控制显示或隐藏 */
	var showByClass = w.showByClass = function(clsname) {
		$obj = $("." + clsname)[0];
		if($obj && $obj.classList.contains('mui-hidden')) {
			$obj.classList.remove('mui-hidden');
		}
	};
	var hideByClass = w.hideByClass = function(clsname) {
		$obj = $("." + clsname)[0];
		if($obj && !$obj.classList.contains('mui-hidden')) {
			$obj.classList.add('mui-hidden');
		}
	};
	
	var isIOS = w.isIOS = function() {
		return mui.os.ios;
	};
	var isAndroid = w.isAndroid = function() {
		return mui.os.android;
	};
	var isStream = w.isStream = function() {
		return mui.os.stream; //流应用
	};
	
	// 警告框
	var alert = w.alert = function(msg, title, callback) {
		mui.alert(msg, title, callback);
	};
	// 消息提示框
	var toast = w.toast = function(msg) {
		if($.os.plus){
			plus.nativeUI.toast(msg);	
		}else{
			mui.toast(msg);
		}
	};

    
    // 获取本地是否安装指定客户端
	var isInstalled = w.isInstalled = function(id) {
		if (id === 'qihoo' && mui.os.plus) {
			return true;
		}
		if (mui.os.android) {
			var main = plus.android.runtimeMainActivity();
			var packageManager = main.getPackageManager();
			var PackageManager = plus.android.importClass(packageManager)
			var packageName = {
				"qq": "com.tencent.mobileqq",
				"weixin": "com.tencent.mm",
				"sinaweibo": "com.sina.weibo"
			}
			try {
				return packageManager.getPackageInfo(packageName[id], PackageManager.GET_ACTIVITIES);
			} catch (e) {}
		} else {
			switch (id) {
				case "qq":
					var TencentOAuth = plus.ios.import("TencentOAuth");
					return TencentOAuth.iphoneQQInstalled();
				case "weixin":
					var WXApi = plus.ios.import("WXApi");
					return WXApi.isWXAppInstalled()
				case "sinaweibo":
					var SinaAPI = plus.ios.import("WeiboSDK");
					return SinaAPI.isWeiboAppInstalled()
				default:
					break;
			}
		}
	};
    
	
}(mui, window, document));